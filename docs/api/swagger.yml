openapi: 3.0.0
info:
  version: "1.0.0-SNAPSHOT-oas3"
  title: OverHours REST API
  description: ''
tags:
  - name: timeLogs
  - name: user
paths:
  /users:
    get:
      tags:
        - user
      summary: Get all users
      responses:
        '200':
          description: Successfully returned a list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      tags:
        - user
      summary: Add a new user
      responses:
        '200':
          description: Successfully created a user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeInfo'
        '400':
          description: Invalid input
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: User object that needs to be created
        required: true

  '/users/{userId}':
    get:
      tags:
        - user
      summary: Get user with ID
      parameters:
        - name: userId
          in: path
          description: ID of user to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid userId format
        '404':
          description: Not found
    put:
      tags:
        - user
      summary: Update a user with ID
      parameters:
        - name: userId
          in: path
          description: ID of user to return
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Successfully update a User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeInfo'
        '400':
          description: Invalid input
      requestBody:
        description: A JSON object of User
        content:
          application/json:
            schema:
              type: object
              properties:
                Name:
                  type: string
                Username:
                  type: string
                Email:
                  type: string
                PermissionLevel:
                  type: integer
                GraduationYear:
                  type: integer
                PasswordNeedChange:
                  type: boolean
    delete:
      tags:
        - user
      summary: Delete a user with ID
      parameters:
        - name: userId
          in: path
          description: ID of user to delete
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successfully delete a User
        '400':
          description: Invalid userId
        '404':
          description: not found

  # TimLogs
  /timeLogs:
    get:
      tags:
        - timeLogs
      summary: Get all timeLogs
      responses:
        '200':
          description: Successfully returned a list of timeLogs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TimeLog'
    post:
      tags:
        - timeLogs
      summary: Add a new timeLog
      responses:
        '200':
          description: Successfully created a timeLog
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeInfo'
        '400':
          description: Invalid input
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimeLog'
        description: TimeLog object that needs to be created
        required: true

  '/timeLogs/{timeLogId}':
    get:
      tags:
        - timeLogs
      summary: Find timeLog with ID
      parameters:
        - name: timeLogId
          in: path
          description: ID of timeLog to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeLog'
        '404':
          description: not found
    put:
      tags:
        - timeLogs
      summary: Update a timeLog with ID
      parameters:
        - name: timeLogId
          in: path
          description: ID of timeLog to update
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Successfully update a TimeLog
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeInfo'
        '400':
          description: Invalid input
      requestBody:
        description: A JSON object of TimeLog
        content:
          application/json:
            schema:
              type: object
              properties:
                UserID:
                  type: string
                TimeIn:
                  type: integer
                TimeOut:
                  type: integer
                SeasonId:
                  type: string
    delete:
      tags:
        - timeLogs
      summary: Delete a timeLog with ID
      parameters:
        - name: timeLogId
          in: path
          description: ID of timeLog to delete
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successfully delete a TimeLog
        '400':
          description: Invalid timeLogId
        '404':
          description: not found

  /timeLog/checkin:
    put:
      tags:
        - timeLogs
      summary: Checkin a user
      parameters:
        - name: user
          in: query
          description: ID of the user to Checkin
          required: true
          schema:
            type: string
        - name: season
          in: query
          description: ID of the season to Checkin
          schema:
            type: string
      responses:
        '204':
          description: Successful operation
        '400':
          description: Invaild user parameters
        '422':
          description: Operation is not allowed
  /timeLog/checkout:
    put:
      tags:
        - timeLogs
      summary: Checkout a user
      parameters:
        - name: user
          in: query
          description: ID of the user to Checkout
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successful operation
        '400':
          description: Invaild user parameters
        '422':
          description: Operation is not allowed
  # meeting
  /meetings:
    get:
      tags:
        - meetings
      summary: Get all meetings
      responses:
        '200':
          description: Successfully returned a list of meeting
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Meeting'
    post:
      tags:
        - meetings
      summary: Add a new meeting
      responses:
        '201':
          description: Successfully create a meeting
  '/meetings/{meetingId}':
    get:
      tags:
        - meetings
      summary: Get meeting with ID
      parameters:
        - name: meetingId
          in: path
          description: ID of meeting to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meeting'
        '404':
          description: not found
    put:
      tags:
        - meetings
      summary: Update a meeting with ID
      parameters:
        - name: meetingId
          in: path
          description: ID of meeting to update
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Successfully update a Meeting
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeInfo'
        '400':
          description: Invalid input
      requestBody:
        description: A JSON object of TimeLog
        content:
          application/json:
            schema:
              type: object
              properties:
                StartTime:
                  type: integer
                SeasonId:
                  type: string

    delete:
      tags:
        - meetings
      summary: Delete a meeting with ID
      parameters:
        - name: meetingId
          in: path
          description: ID of meeting to delete
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successfully delete a meeting
        '400':
          description: Invalid meetingId
        '404':
          description: not found
  '/meeting/logs/{meetingId}':
    get:
      tags:
        - meetings
      summary: Get all timeLogs for the meeting
      parameters:
        - name: meetingId
          in: path
          description: ID of the meeting
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully returned a list of timeLogs of the meeting
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TimeLog'
  '/boards/season/{seasonId}':
    get:
      tags:
        - boards
      summary: Get leaderboard by season
      parameters:
        - name: seasonId
          in: path
          description: ID of the season
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    UserID:
                      type: string
                    TotalTime:
                      type: integer
components:
  schemas:
    User:
      type: object
      properties:
        Name:
          type: string
        Username:
          type: string
        Email:
          type: string
        PermissionLevel:
          type: integer
        GraduationYear:
          type: integer
        PasswordNeedChange:
          type: boolean
        Id:
          type: string
    TimeLog:
      type: object
      properties:
        UserID:
          type: string
        TimeIn:
          type: integer
        TimeOut:
          type: integer
        SeasonId:
          type: string
        Id:
          type: string
    Meeting:
      type: object
      properties:
        MeetId:
          type: string
        StartTime:
          type: integer
        SeasonId:
          type: string
        Title:
          type: string
        Description:
          type: string
        CheckinLevel:
          type: integer
        StartCheckinTime:
          type: integer
        FinishTime:
          type: integer
        Participants:
          type: array
          items:
            $ref: '#/components/schemas/ParticipantData'
    ParticipantData:
      type: object
      properties:
        UserId:
          type: string
        Leave:
          type: boolean
        IsAdmin:
          type: boolean
    ChangeInfo:
      type: object
      properties:
        Updated:
          type: integer
        Removed:
          type: integer
        Matched:
          type: integer
        UpsertedId:
          type: string
  requestBodies:
    TimeLogsBody:
      description: A JSON object of TimeLog
      content:
        application/json:
          schema:
            type: object
            properties:
              UserID:
                type: string
              TimeIn:
                type: integer
              TimeOut:
                type: integer
              SeasonId:
                type: string
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: session_jwt

security:
  - cookieAuth: []

servers:
  - url: 'https://virtserver.swaggerhub.com/kennhung/OverHours/1.0.0-SNAPSHOT'
  - url: 'http://virtserver.swaggerhub.com/kennhung/OverHours/1.0.0-SNAPSHOT'